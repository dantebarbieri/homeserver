services:
  adguardhome:
    image: adguard/adguardhome
    container_name: adguardhome
    restart: unless-stopped
    networks:
      - default
    volumes:
      - ${DATA}/adguardhome/workdir:/opt/adguardhome/work
      - ${DATA}/adguardhome/confdir:/opt/adguardhome/conf
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp"
      - "68:68/udp"
      - "443:443/udp"
      - "3000:3000/tcp"
      - "853:853/tcp"
      - "853:853/udp"
      - "5443:5443/tcp"
      - "5443:5443/udp"
      - "6060:6060/tcp"

  cs2-server:
    image: joedwards32/cs2
    container_name: cs2-dedicated
    environment:
      # Server configuration
      SRCDS_TOKEN: ${SRCDS_TOKEN} # Game Server Token from https://steamcommunity.com/dev/managegameservers
      STEAMAPPVALIDATE: 0 # (0 - no validation, 1 - enable validation)
      CS2_SERVERNAME: ${CS2_NAME} # (Set the visible name for your private server)
      CS2_CHEATS: 0 # (0 - disable cheats, 1 - enable cheats)
      CS2_PORT: 27015 # (CS2 server listen port tcp_udp)
      CS2_SERVER_HIBERNATE: 0 # (Put server in a low CPU state when there are no players. 0 - hibernation disabled, 1 - hibernation enabled)
      CS2_RCON_PORT: null # (Optional, use a simple TCP proxy to have RCON listen on an alternative port. Useful for services like AWS Fargate which do not support mixed protocol ports.)
      CS2_LAN: 0 # (0 - LAN mode disabled, 1 - LAN Mode enabled)
      CS2_RCONPW: ${CS2_RCONPW} # (RCON password)
      CS2_PW: ${CS2_PW} # (CS2 server password)
      CS2_MAXPLAYERS: 10 # (Max players)
      CS2_ADDITIONAL_ARGS: null # (Optional additional arguments to pass into cs2)
      CS2_CFG_URL: null # HTTP/HTTPS URL to fetch a Tar Gzip bundle of configuration files/mods
      # Game modes
      CS2_GAMEALIAS: null # (Game type, e.g. casual, competitive, deathmatch. See https://developer.valvesoftware.com/wiki/Counter-Strike_2/Dedicated_Servers)
      CS2_GAMETYPE: 0 # (Used if CS2_GAMEALIAS not defined. See https://developer.valvesoftware.com/wiki/Counter-Strike_2/Dedicated_Servers)
      CS2_GAMEMODE: 1 # (Used if CS2_GAMEALIAS not defined. See https://developer.valvesoftware.com/wiki/Counter-Strike_2/Dedicated_Servers)
      CS2_MAPGROUP: "mg_active" # (Map pool)
      CS2_STARTMAP: "de_inferno" # (Start map)
      # Bots
      CS2_BOT_DIFFICULTY: null # (0 - easy, 1 - normal, 2 - hard, 3 - expert)
      CS2_BOT_QUOTA: null # (Number of bots)
      CS2_BOT_QUOTA_MODE: null # (fill, competitive)
      # TV
      TV_AUTORECORD: 0 # Automatically records all games as CSTV demos: 0=off, 1=on.
      TV_ENABLE: 0 # Activates CSTV on server: 0=off, 1=on.
      TV_PORT: 27020 # Host SourceTV port
      TV_PW: ${TV_PW} # CSTV password for clients
      TV_RELAY_PW: ${TV_RELAY_PW} # CSTV password for relay proxies
      TV_MAXRATE: 0 # World snapshots to broadcast per second. Affects camera tickrate.
      TV_DELAY: 0 # Max CSTV spectator bandwidth rate allowed, 0 == unlimited
      # Logs
      CS2_LOG: "on" # 'on'/'off'
      CS2_LOG_MONEY: 0 # Turns money logging on/off: (0=off, 1=on)
      CS2_LOG_DETAIL: 0 # Combat damage logging: (0=disabled, 1=enemy, 2=friendly, 3=all)
      CS2_LOG_ITEMS: 0 # Turns item logging on/off: (0=off, 1=on)
    networks:
      - default
    volumes:
      - cs2:/home/steam/cs2-dedicated/ # Persistent data volume mount point inside container
    ports:
      - "27015:27015/tcp" # TCP
      - "27015:27015/udp" # UDP
      - "27020:27020/udp" # UDP

  homer:
    image: b4bz/homer
    container_name: homer
    user: "${UID}:${GID}"
    environment:
      INIT_ASSETS: 1
    networks:
      - default
    volumes:
      - ${CONFIG}/homeserver/homer/data:/www/assets

  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    extends:
      file: hwaccel.transcoding.yml
      service: nvenc
    networks:
      - default
      - immich
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    depends_on:
      - redis
      - database
    restart: always
    healthcheck:
      disable: false

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}-cuda
    extends:
      file: hwaccel.ml.yml
      service: cuda
    networks:
      - immich
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    restart: always
    healthcheck:
      disable: false

  immich_redis:
    container_name: immich_redis
    image: docker.io/redis:6.2-alpine@sha256:2ba50e1ac3a0ea17b736ce9db2b0a9f6f8b85d4c27d5f5accc6a416d8f42c6d5
    networks:
      - immich
    restart: always
    healthcheck:
      test: redis-cli ping || exit 1

  database:
    container_name: immich_postgres
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    command:
      [
        "postgres",
        "-c",
        "shared_preload_libraries=vectors.so",
        "-c",
        'search_path="$$user", public, vectors',
        "-c",
        "logging_collector=on",
        "-c",
        "max_wal_size=2GB",
        "-c",
        "shared_buffers=512MB",
        "-c",
        "wal_compression=on",
      ]
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: "--data-checksums"
    networks:
      - immich
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: pg_isready --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' || exit 1; Chksum="$$(psql --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m

  custom-minecraft-server:
    image: itzg/minecraft-server:java8
    container_name: custom-minecraft-server
    tty: true
    stdin_open: true
    ports:
      - "36677:25565"
    environment:
      EULA: true
      MODE: "survival"
      MOTD: "§bCustomized §lTekkit§r Minecraft Server\nRunning Version: §c§o%VERSION%§r."
      DIFFICULTY: "hard"
      OPS: |
        DanteVB
        ElVonHresvelg
        Griff Is Here
      ICON: "/data/assets/tekkit-logo.png"
      OVERRIDE_ICON: true
      ENABLE_QUERY: true
      ENABLE_COMMAND_BLOCK: true
      VIEW_DISTANCE: 32
      MEMORY: 12G
      TYPE: "AUTO_CURSEFORGE"
      CF_API_KEY: ${CF_API_KEY}
      CF_SLUG: TODO
    networks:
      - default
    volumes:
      - custom-minecraft-server:/data
      - ${CONFIG}/minecraft/assets:/data/assets

  rlcraft-minecraft-server:
    image: itzg/minecraft-server:java8
    container_name: rlcraft-minecraft-server
    tty: true
    stdin_open: true
    ports:
      - "36676:25565"
    environment:
      EULA: true
      MODE: "survival"
      MOTD: "§aRL Craft§r server running Minecraft §c§o%VERSION%§r."
      DIFFICULTY: "hard"
      OPS: |
        DanteVB
        Otakeb
        Heruth99
      ICON: "https://media.forgecdn.net/avatars/thumbnails/468/243/64/64/637751369169569212.png"
      OVERRIDE_ICON: true
      ENABLE_QUERY: true
      ENABLE_COMMAND_BLOCK: true
      VIEW_DISTANCE: 32
      MEMORY: 12G
      TYPE: "AUTO_CURSEFORGE"
      CF_API_KEY: ${CF_API_KEY}
      CF_SLUG: rlcraft
    networks:
      - default
    volumes:
      - rlcraft-minecraft-server:/data

  nginxproxymanager:
    image: "jc21/nginx-proxy-manager:latest"
    container_name: nginxproxymanager
    restart: unless-stopped
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    networks:
      - default
    volumes:
      - ${DATA}/nginxproxymanager/data:/data
      - ${DATA}/nginxproxymanager/letsencrypt:/etc/letsencrypt
      - ${DATA}/nginxproxymanager/snippets:/snippets

  ouroboros:
    container_name: ouroboros
    hostname: ouroboros
    image: pyouroboros/ouroboros
    environment:
      CLEANUP: true
      INTERVAL: 300
      LOG_LEVEL: info
      SELF_UPDATE: true
      IGNORE: immich-server immich-microservices immich-machine-learning redis database
      TZ: ${TZ}
    restart: unless-stopped
    networks:
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  plex:
    container_name: plex
    image: plexinc/pms-docker
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities:
                - gpu
    ports:
      - "32400:32400/tcp"
      - "8324:8324/tcp"
      - "32469:32469/tcp"
      - "1900:1900/udp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
    environment:
      PLEX_UID: ${UID}
      PLEX_GID: ${GID}
      TZ: ${TZ}
      PLEX_CLAIM: ${PLEX_CLAIM}
      ADVERTISE_IP: ${ADVERTISE_IP}
      LAN_NETWORKS: 192.168.1.0/24,172.16.0.0/16
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,video,utility
    networks:
      - default
    volumes:
      - ${DATA}/plex/config:/config
      - /tmp/plex:/transcode
      - ${RAID}/shared/media:/data/media
    devices:
      - "/dev/dri:/dev/dri"
    runtime: "nvidia"

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      PUID: ${UID}
      PGID: ${GID}
      TZ: ${TZ}
    networks:
      - default
    volumes:
      - ${DATA}/qbittorrent/config:/config
      - ${RAID}/shared/torrents:/data/torrents
      - ${CONFIG}/homeserver/VueTorrent:/vuetorrent
    ports:
      - 6881:6881
      - 6881:6881/udp
    restart: unless-stopped

  radarr:
    container_name: radarr
    image: ghcr.io/hotio/radarr:latest
    restart: unless-stopped
    logging:
      driver: json-file
    environment:
      PUID: ${UID}
      PGID: ${GID}
      TZ: ${TZ}
    networks:
      - default
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DATA}/radarr/config:/config
      - ${RAID}/shared:/data

  sonarr:
    container_name: sonarr
    image: ghcr.io/hotio/sonarr:latest
    restart: unless-stopped
    logging:
      driver: json-file
    environment:
      PUID: ${UID}
      PGID: ${GID}
      TZ: ${TZ}
    networks:
      - default
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DATA}/sonarr/config:/config
      - ${RAID}/shared:/data

  recyclarr:
    container_name: recyclarr
    image: ghcr.io/recyclarr/recyclarr:latest
    restart: unless-stopped
    environment:
      PUID: ${UID}
      PGID: ${GID}
      TZ: ${TZ}
    networks:
      - default
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DATA}/recyclarr/config:/config

  bazarr:
    container_name: bazarr
    image: ghcr.io/hotio/bazarr:latest
    restart: unless-stopped
    logging:
      driver: json-file
    environment:
      PUID: ${UID}
      PGID: ${GID}
      TZ: ${TZ}
    networks:
      - default
    depends_on:
      - whisperasr
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DATA}/bazarr/config:/config
      - ${RAID}/shared/media:/data/media

  sabnzbd:
    container_name: sabnzbd
    image: ghcr.io/hotio/sabnzbd:latest
    restart: unless-stopped
    logging:
      driver: json-file
    ports:
      - 8989:8080
      - 9090:9090
    environment:
      PUID: ${UID}
      PGID: ${GID}
      TZ: ${TZ}
    networks:
      - default
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DATA}/sabnzbd/config:/config
      - ${RAID}/shared/usenet:/data/usenet:rw

  overseerr:
    image: ghcr.io/hotio/overseerr:latest
    container_name: overseerr
    environment:
      LOG_LEVEL: debug
      PUID: ${UID}
      PGID: ${GID}
      TZ: ${TZ}
      UMASK: "002"
    networks:
      - default
    volumes:
      - ${DATA}/overseerr/config:/app/config
    restart: unless-stopped

  prowlarr:
    container_name: prowlarr
    image: ghcr.io/hotio/prowlarr:latest
    environment:
      PUID: ${UID}
      PGID: ${GID}
      TZ: ${TZ}
      UMASK: "002"
    networks:
      - default
    volumes:
      - ${DATA}/prowlarr/config:/config

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_HTML: ${LOG_HTML:-false}
      CAPTCHA_SOLVER: ${CAPTCHA_SOLVER:-none}
      PUID: ${UID}
      PGID: ${GID}
      TZ: ${TZ}
    networks:
      - default
    restart: unless-stopped

  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    networks:
      - default
    volumes:
      - vw-data:/data
    restart: unless-stopped

  redis:
    container_name: redis
    image: cgr.dev/chainguard/valkey:latest
    command: --save 30 1 --loglevel warning
    restart: unless-stopped
    networks:
      - searxng
    volumes:
      - valkey-data:/data
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  searxng:
    container_name: searxng
    image: docker.io/searxng/searxng:latest
    restart: unless-stopped
    networks:
      - default
      - searxng
    volumes:
      - ${DATA}/searxng/config:/etc/searxng:rw
    environment:
      - SEARXNG_BASE_URL=https://${SEARXNG_HOSTNAME:-localhost}/
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  ollama:
    # GPU support
    deploy:
      resources:
        reservations:
          devices:
            - driver: ${OLLAMA_GPU_DRIVER:-nvidia}
              count: ${OLLAMA_GPU_COUNT:-1}
              capabilities:
                - gpu
    networks:
      - open-webui
    volumes:
      - ollama:/root/.ollama
    environment:
      OLLAMA_HOST: 0.0.0.0
    container_name: ollama
    pull_policy: always
    tty: true
    restart: unless-stopped
    image: ollama/ollama:${OLLAMA_DOCKER_TAG:-latest}

  open-webui:
    build:
      context: .
      args:
        OLLAMA_BASE_URL: "/ollama"
      dockerfile: Dockerfile
    image: ghcr.io/open-webui/open-webui:${WEBUI_DOCKER_TAG:-main}
    container_name: open-webui
    networks:
      - open-webui
      - default
    volumes:
      - open-webui:/app/backend/data
    depends_on:
      - ollama
    environment:
      ENABLE_RAG_WEB_SEARCH: True
      OLLAMA_BASE_URL: http://ollama:11434
      RAG_WEB_SEARCH_ENGINE: "searxng"
      RAG_WEB_SEARCH_RESULT_COUNT: 3
      RAG_WEB_SEARCH_CONCURRENT_REQUESTS: 10
      SEARXNG_QUERY_URL: http://searxng:8080/search?q=<query>
    restart: unless-stopped

  whisperasr:
    container_name: whisperasr
    image: onerahmet/openai-whisper-asr-webservice:latest-gpu
    environment:
      ASR_MODEL: turbo
      ASR_ENGINE: openai_whisper
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    networks:
      - default

  monitoring:
    image: nicolargo/glances:latest
    restart: always
    pid: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/os-release:/etc/os-release:ro
    environment:
      GLANCES_OPT: -w

  dash:
    image: mauricenino/dashdot:nvidia
    container_name: dashdot
    restart: unless-stopped
    privileged: true
    deploy:
      resources:
        reservations:
          devices:
            - capabilities:
                - gpu
    networks:
      - default
    volumes:
      - /:/mnt/host:ro
    environment:
      DASHDOT_WIDGET_LIST: "os,cpu,storage,ram,network,gpu"
      DASHDOT_SHOW_HOST: true
      DASHDOT_ENABLE_CPU_TEMPS: true
      DASHDOT_NETWORK_LABEL_LIST: type,speed_up,speed_down,interface_speed,public_ip
      DASHDOT_ACCEPT_OOKLA_EULA: true

  authelia_postgres:
    image: postgres:alpine
    container_name: authelia_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - authelia-postgres:/var/lib/postgresql/data
    networks:
      - authelia
    restart: unless-stopped

  # Redis service for Authelia session management
  authelia_redis:
    image: redis:alpine
    container_name: authelia_redis
    networks:
      - authelia
    restart: unless-stopped

  # Authelia service
  authelia:
    image: authelia/authelia
    container_name: authelia
    volumes:
      - ${DATA}/authelia/config:/config # Configuration directory
      - authelia:/var/lib/authelia # Storage for user data
    environment:
      TZ: ${TZ}
      AUTHELIA_JWT_SECRET: your-jwt-secret # Replace with a secret key
      AUTHELIA_SESSION_SECRET: your-session-secret # Replace with a session secret
      AUTHELIA_STORAGE_ENCRYPTION_KEY: your-encryption-key # Replace with an encryption key
    networks:
      - default
      - authelia
    restart: unless-stopped

networks:
  authelia:
  default:
  immich:
  open-webui:
  searxng:

volumes:
  authelia:
  authelia-postgres:
  cache-pip:
  cache-poetry:
  cache-whisper:
  cs2:
  pgdata:
  model-cache:
  custom-minecraft-server:
  rlcraft-minecraft-server:
  nextcloud_aio_mastercontainer:
    name: nextcloud_aio_mastercontainer # This line is not allowed to be changed as otherwise the built-in backup solution will not work
  ollama:
  open-webui:
  valkey-data:
  vw-data:
